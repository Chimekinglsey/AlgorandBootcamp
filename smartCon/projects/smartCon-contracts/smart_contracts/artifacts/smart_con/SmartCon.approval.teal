#pragma version 10

smart_contracts.smart_con.contract.SmartCon.approval_program:
    // smart_contracts/smart_con/contract.py:4
    // class SmartCon(ARC4Contract):
    method "create_app(asset,uint64)void"
    method "set_price(uint64)void"
    method "opt_in(pay)void"
    method "buy_asset(pay,uint64)void"
    method "delete_app()void"
    txna ApplicationArgs 0
    match main_create_app_route@1 main_set_price_route@2 main_opt_in_route@3 main_buy_asset_route@4 main_delete_app_route@5
    err // reject transaction

main_create_app_route@1:
    // smart_contracts/smart_con/contract.py:10
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/smart_con/contract.py:4
    // class SmartCon(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/smart_con/contract.py:10
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    callsub create_app
    int 1
    return

main_set_price_route@2:
    // smart_contracts/smart_con/contract.py:16
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/smart_con/contract.py:4
    // class SmartCon(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/smart_con/contract.py:16
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_opt_in_route@3:
    // smart_contracts/smart_con/contract.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/smart_con/contract.py:4
    // class SmartCon(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/smart_con/contract.py:23
    // @arc4.abimethod
    callsub opt_in
    int 1
    return

main_buy_asset_route@4:
    // smart_contracts/smart_con/contract.py:38
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/smart_con/contract.py:4
    // class SmartCon(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/smart_con/contract.py:38
    // @arc4.abimethod
    callsub buy_asset
    int 1
    return

main_delete_app_route@5:
    // smart_contracts/smart_con/contract.py:54
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete_app
    int 1
    return


// smart_contracts.smart_con.contract.SmartCon.create_app(asset: uint64, unit_price: uint64) -> void:
create_app:
    // smart_contracts/smart_con/contract.py:10-11
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create_app(self, asset: Asset, unit_price: UInt64) -> None:
    proto 2 0
    // smart_contracts/smart_con/contract.py:13
    // self.asset_id = asset.id
    byte "asset_id"
    frame_dig -2
    app_global_put
    // smart_contracts/smart_con/contract.py:14
    // self.unit_price = unit_price
    byte "unit_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.smart_con.contract.SmartCon.set_price(new_unit_price: uint64) -> void:
set_price:
    // smart_contracts/smart_con/contract.py:16-17
    // @arc4.abimethod
    // def set_price(self, new_unit_price:UInt64) -> None:
    proto 1 0
    // smart_contracts/smart_con/contract.py:19
    // assert Txn.sender == Global.creator_address # "Only creator can set price"
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/smart_con/contract.py:20
    // assert new_unit_price > 0
    frame_dig -1
    assert
    // smart_contracts/smart_con/contract.py:21
    // self.unit_price = new_unit_price
    byte "unit_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.smart_con.contract.SmartCon.opt_in(mbr_txn: uint64) -> void:
opt_in:
    // smart_contracts/smart_con/contract.py:23-24
    // @arc4.abimethod
    // def opt_in(self, mbr_txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/smart_con/contract.py:26
    // assert not Global.caller_application_address.is_opted_in(Asset(self.asset_id))
    global CallerApplicationAddress
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/smart_con/contract.py:27
    // assert mbr_txn.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/smart_con/contract.py:28
    // assert mbr_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/smart_con/contract.py:30-35
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     asset_amount = 0
    // ).submit()
    itxn_begin
    // smart_contracts/smart_con/contract.py:31
    // xfer_asset = self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/smart_con/contract.py:32
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/smart_con/contract.py:33
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/smart_con/contract.py:34
    // asset_amount = 0
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field Sender
    itxn_field XferAsset
    // smart_contracts/smart_con/contract.py:30
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/smart_con/contract.py:30-35
    // itxn.AssetTransfer(
    //     xfer_asset = self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     asset_amount = 0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.smart_con.contract.SmartCon.buy_asset(buy_txn: uint64, quantity: uint64) -> void:
buy_asset:
    // smart_contracts/smart_con/contract.py:38-39
    // @arc4.abimethod
    // def buy_asset(self, buy_txn: gtxn.PaymentTransaction, quantity: UInt64) -> None:
    proto 2 0
    // smart_contracts/smart_con/contract.py:41
    // assert self.unit_price != UInt64(0)
    int 0
    byte "unit_price"
    app_global_get_ex
    assert // check unit_price exists
    assert
    // smart_contracts/smart_con/contract.py:42
    // assert buy_txn.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/smart_con/contract.py:43
    // assert buy_txn.amount == self.unit_price * quantity
    frame_dig -2
    gtxns Amount
    int 0
    byte "unit_price"
    app_global_get_ex
    assert // check unit_price exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/smart_con/contract.py:44
    // assert buy_txn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/smart_con/contract.py:47-52
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity
    // ).submit()
    itxn_begin
    // smart_contracts/smart_con/contract.py:48
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/smart_con/contract.py:49
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/smart_con/contract.py:50
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field Sender
    itxn_field XferAsset
    // smart_contracts/smart_con/contract.py:47
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/smart_con/contract.py:47-52
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.smart_con.contract.SmartCon.delete_app() -> void:
delete_app:
    // smart_contracts/smart_con/contract.py:54-55
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def delete_app(self) -> None:
    proto 0 0
    // smart_contracts/smart_con/contract.py:57
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/smart_con/contract.py:59-65
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address
    // ).submit()
    itxn_begin
    // smart_contracts/smart_con/contract.py:60
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/smart_con/contract.py:61
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/smart_con/contract.py:62
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/smart_con/contract.py:64
    // asset_close_to=Global.creator_address
    dup
    itxn_field AssetCloseTo
    // smart_contracts/smart_con/contract.py:63
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field Sender
    itxn_field XferAsset
    // smart_contracts/smart_con/contract.py:59
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/smart_con/contract.py:59-65
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     sender=Global.current_application_address,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address
    // ).submit()
    itxn_submit
    // smart_contracts/smart_con/contract.py:67-72
    // itxn.Payment(
    //     amount=0,
    //     sender=Global.current_application_address,
    //     receiver=Global.creator_address,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_begin
    // smart_contracts/smart_con/contract.py:69
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/smart_con/contract.py:70
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/smart_con/contract.py:71
    // close_remainder_to=Global.creator_address
    dup
    itxn_field CloseRemainderTo
    itxn_field Receiver
    itxn_field Sender
    // smart_contracts/smart_con/contract.py:68
    // amount=0,
    int 0
    itxn_field Amount
    // smart_contracts/smart_con/contract.py:67
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/smart_con/contract.py:67-72
    // itxn.Payment(
    //     amount=0,
    //     sender=Global.current_application_address,
    //     receiver=Global.creator_address,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_submit
    retsub
